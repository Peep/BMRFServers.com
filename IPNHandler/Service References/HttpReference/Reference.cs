//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IPNHandler.HttpReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HttpReference.IRustService")]
    public interface IRustService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/DeployRustServer", ReplyAction="http://tempuri.org/IRustService/DeployRustServerResponse")]
        System.Collections.Generic.Dictionary<string, object> DeployRustServer(string identifier, int slots);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/DeployRustServer", ReplyAction="http://tempuri.org/IRustService/DeployRustServerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> DeployRustServerAsync(string identifier, int slots);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/RunSteamUpdate", ReplyAction="http://tempuri.org/IRustService/RunSteamUpdateResponse")]
        Rust.Results RunSteamUpdate(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/RunSteamUpdate", ReplyAction="http://tempuri.org/IRustService/RunSteamUpdateResponse")]
        System.Threading.Tasks.Task<Rust.Results> RunSteamUpdateAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/InstallMagma", ReplyAction="http://tempuri.org/IRustService/InstallMagmaResponse")]
        Rust.Results InstallMagma(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/InstallMagma", ReplyAction="http://tempuri.org/IRustService/InstallMagmaResponse")]
        System.Threading.Tasks.Task<Rust.Results> InstallMagmaAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/IsMagmaInstalled", ReplyAction="http://tempuri.org/IRustService/IsMagmaInstalledResponse")]
        Rust.MagmaResults IsMagmaInstalled(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/IsMagmaInstalled", ReplyAction="http://tempuri.org/IRustService/IsMagmaInstalledResponse")]
        System.Threading.Tasks.Task<Rust.MagmaResults> IsMagmaInstalledAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/UninstallMagma", ReplyAction="http://tempuri.org/IRustService/UninstallMagmaResponse")]
        Rust.Results UninstallMagma(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/UninstallMagma", ReplyAction="http://tempuri.org/IRustService/UninstallMagmaResponse")]
        System.Threading.Tasks.Task<Rust.Results> UninstallMagmaAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/ChangeFtpPass", ReplyAction="http://tempuri.org/IRustService/ChangeFtpPassResponse")]
        Rust.Results ChangeFtpPass(string ident, string newPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/ChangeFtpPass", ReplyAction="http://tempuri.org/IRustService/ChangeFtpPassResponse")]
        System.Threading.Tasks.Task<Rust.Results> ChangeFtpPassAsync(string ident, string newPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/ToggleCheatpunch", ReplyAction="http://tempuri.org/IRustService/ToggleCheatpunchResponse")]
        Rust.CheatpunchResults ToggleCheatpunch(string ident, int action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/ToggleCheatpunch", ReplyAction="http://tempuri.org/IRustService/ToggleCheatpunchResponse")]
        System.Threading.Tasks.Task<Rust.CheatpunchResults> ToggleCheatpunchAsync(string ident, int action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/GetConfigValue", ReplyAction="http://tempuri.org/IRustService/GetConfigValueResponse")]
        Rust.ConfigResults GetConfigValue(string ident, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/GetConfigValue", ReplyAction="http://tempuri.org/IRustService/GetConfigValueResponse")]
        System.Threading.Tasks.Task<Rust.ConfigResults> GetConfigValueAsync(string ident, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/SetConfigValue", ReplyAction="http://tempuri.org/IRustService/SetConfigValueResponse")]
        Rust.Results SetConfigValue(string ident, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/SetConfigValue", ReplyAction="http://tempuri.org/IRustService/SetConfigValueResponse")]
        System.Threading.Tasks.Task<Rust.Results> SetConfigValueAsync(string ident, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/ServerStatus", ReplyAction="http://tempuri.org/IRustService/ServerStatusResponse")]
        Rust.ServiceResults ServerStatus(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/ServerStatus", ReplyAction="http://tempuri.org/IRustService/ServerStatusResponse")]
        System.Threading.Tasks.Task<Rust.ServiceResults> ServerStatusAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/StartServer", ReplyAction="http://tempuri.org/IRustService/StartServerResponse")]
        Rust.Results StartServer(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/StartServer", ReplyAction="http://tempuri.org/IRustService/StartServerResponse")]
        System.Threading.Tasks.Task<Rust.Results> StartServerAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/StopServer", ReplyAction="http://tempuri.org/IRustService/StopServerResponse")]
        Rust.Results StopServer(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/StopServer", ReplyAction="http://tempuri.org/IRustService/StopServerResponse")]
        System.Threading.Tasks.Task<Rust.Results> StopServerAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/RestartServer", ReplyAction="http://tempuri.org/IRustService/RestartServerResponse")]
        Rust.Results RestartServer(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/RestartServer", ReplyAction="http://tempuri.org/IRustService/RestartServerResponse")]
        System.Threading.Tasks.Task<Rust.Results> RestartServerAsync(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/UninstallRustServer", ReplyAction="http://tempuri.org/IRustService/UninstallRustServerResponse")]
        Rust.Results UninstallRustServer(string ident);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRustService/UninstallRustServer", ReplyAction="http://tempuri.org/IRustService/UninstallRustServerResponse")]
        System.Threading.Tasks.Task<Rust.Results> UninstallRustServerAsync(string ident);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRustServiceChannel : IPNHandler.HttpReference.IRustService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RustServiceClient : System.ServiceModel.ClientBase<IPNHandler.HttpReference.IRustService>, IPNHandler.HttpReference.IRustService {
        
        public RustServiceClient() {
        }
        
        public RustServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RustServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RustServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RustServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.Dictionary<string, object> DeployRustServer(string identifier, int slots) {
            return base.Channel.DeployRustServer(identifier, slots);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, object>> DeployRustServerAsync(string identifier, int slots) {
            return base.Channel.DeployRustServerAsync(identifier, slots);
        }
        
        public Rust.Results RunSteamUpdate(string ident) {
            return base.Channel.RunSteamUpdate(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> RunSteamUpdateAsync(string ident) {
            return base.Channel.RunSteamUpdateAsync(ident);
        }
        
        public Rust.Results InstallMagma(string ident) {
            return base.Channel.InstallMagma(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> InstallMagmaAsync(string ident) {
            return base.Channel.InstallMagmaAsync(ident);
        }
        
        public Rust.MagmaResults IsMagmaInstalled(string ident) {
            return base.Channel.IsMagmaInstalled(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.MagmaResults> IsMagmaInstalledAsync(string ident) {
            return base.Channel.IsMagmaInstalledAsync(ident);
        }
        
        public Rust.Results UninstallMagma(string ident) {
            return base.Channel.UninstallMagma(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> UninstallMagmaAsync(string ident) {
            return base.Channel.UninstallMagmaAsync(ident);
        }
        
        public Rust.Results ChangeFtpPass(string ident, string newPass) {
            return base.Channel.ChangeFtpPass(ident, newPass);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> ChangeFtpPassAsync(string ident, string newPass) {
            return base.Channel.ChangeFtpPassAsync(ident, newPass);
        }
        
        public Rust.CheatpunchResults ToggleCheatpunch(string ident, int action) {
            return base.Channel.ToggleCheatpunch(ident, action);
        }
        
        public System.Threading.Tasks.Task<Rust.CheatpunchResults> ToggleCheatpunchAsync(string ident, int action) {
            return base.Channel.ToggleCheatpunchAsync(ident, action);
        }
        
        public Rust.ConfigResults GetConfigValue(string ident, string value) {
            return base.Channel.GetConfigValue(ident, value);
        }
        
        public System.Threading.Tasks.Task<Rust.ConfigResults> GetConfigValueAsync(string ident, string value) {
            return base.Channel.GetConfigValueAsync(ident, value);
        }
        
        public Rust.Results SetConfigValue(string ident, string key, string value) {
            return base.Channel.SetConfigValue(ident, key, value);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> SetConfigValueAsync(string ident, string key, string value) {
            return base.Channel.SetConfigValueAsync(ident, key, value);
        }
        
        public Rust.ServiceResults ServerStatus(string ident) {
            return base.Channel.ServerStatus(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.ServiceResults> ServerStatusAsync(string ident) {
            return base.Channel.ServerStatusAsync(ident);
        }
        
        public Rust.Results StartServer(string ident) {
            return base.Channel.StartServer(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> StartServerAsync(string ident) {
            return base.Channel.StartServerAsync(ident);
        }
        
        public Rust.Results StopServer(string ident) {
            return base.Channel.StopServer(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> StopServerAsync(string ident) {
            return base.Channel.StopServerAsync(ident);
        }
        
        public Rust.Results RestartServer(string ident) {
            return base.Channel.RestartServer(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> RestartServerAsync(string ident) {
            return base.Channel.RestartServerAsync(ident);
        }
        
        public Rust.Results UninstallRustServer(string ident) {
            return base.Channel.UninstallRustServer(ident);
        }
        
        public System.Threading.Tasks.Task<Rust.Results> UninstallRustServerAsync(string ident) {
            return base.Channel.UninstallRustServerAsync(ident);
        }
    }
}
